
version: "3.8"

services: 
    chronicler_host:
        image: postgres:13.4
        # image: postgres:9.6.23
        container_name: chronicler_host
        # command: docker cp latest.dump chronicler_host:/var/lib/postgresql/data
        # command: pg_restore -U postgres -d chronicler_db /var/lib/postgresql/data/latest.dump
        # healthcheck:
        #     test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
        #     timeout: 45s
        #     interval: 10s
        #     retries: 10
        restart: always
        volumes: 
            - chronicler_volume3:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=${SQL_ROOT_PASSWORD:-unsecured_password}
        ports:
            - 5432:5432
        cap_add:
            - SYS_NICE  # CAP_SYS_NICE (gives sql cpu priority)

    rest-server:
        build: 
            context: .
        container_name: rest-server
        restart: always
        # depends_on:
        #     chronicler_host:
        #         condition: service_healthy
        environment: 
            - DB_PASS=${SQL_ROOT_PASSWORD:-unsecured_password}
            - ADMIN_PASS=${ADMIN_PASS:-password123}
            - DOCKER_FLAG=1
            - PYTHONUNBUFFERED=1
            - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@email.com}
            - ADMIN_ID=${ADMIN_ID:-123}
            - ORPHANAGE_ID=${ORPHANAGE_ID:-321}
            - ORPHAN_EMAIL=${ORPHAN_EMAIL:-orphanage@email.com}

        ports:
            - 5000:5000
        volumes:
            - ./:/app
volumes:
    chronicler_volume3:
        name: chronicler_volume3

networks: 
    default:
        name: chronicler_back
        driver: bridge